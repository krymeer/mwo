AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: TodoApi
      StageName: v1
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "mwo-todo"
        schemes:
        - "https"
        paths:
          "/todo":
            post:
              consumes:
              - "application/json"
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:874845083551:function:TodoPostHandler/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:874845083551:function:TodoGetHandler/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /todo/{id}:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:874845083551:function:TodoGetHandler/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
        definitions:
          "todo":
            type: object
            properties:
              ID:
                type: string
              UserID:
                type: string
              Content:
                type: string
              CreatedAt:
                type: integer
            required: ["UserID", "Content"]
            additionalProperties: false
  TodoPostHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: post_todo.handler
      FunctionName: TodoPostHandler
      Runtime: nodejs6.10
      Events:
        "NewTodo":
          Type: Api
          Properties:
            Path: /todo
            Method: post
            RestApiId: !Ref TodoApi
      Tags:
        Application: mwo-todo
      Role: !GetAtt TodoHandlerRole.Arn
  TodoGetHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_todo.handler
      FunctionName: TodoGetHandler
      Runtime: nodejs6.10
      Events:
        TodoGetById:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: get
            RestApiId: !Ref TodoApi
        TodoGetAll:
          Type: Api
          Properties:
            Path: /todo
            Method: get
            RestApiId: !Ref TodoApi
      Tags:
        Application: mwo-todo
      Role: !GetAtt TodoHandlerRole.Arn
  Todos:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
        -
          AttributeName: "UserID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "UserIndex"
          KeySchema:
            - AttributeName: "UserID"
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - "Content"
              - "CreatedAt"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Application
          Value: mwo-todo
  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Application
          Value: mwo-todo
  PostTodoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [TodoPostHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: TodoApi
            - "/*/*/*"
  GetTodoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [TodoGetHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: TodoApi
            - "/*/*/*"
  TodoHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TodoHandlerRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  TodoHandlersCommonPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TodoHandlersCommonAccessPolicy
      Roles:
        - Ref: TodoHandlerRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: cloudformation:DescribeStackResource
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:cloudformation:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":stack/mwo-todo/*"
          - Effect: Allow
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
            Resource:
              - Fn::Join:
                - ""
                - - "arn:aws:dynamodb:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":table/"
                  - Ref: Todos
              - Fn::Join:
                - ""
                - - "arn:aws:dynamodb:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":table/"
                  - Ref: Users