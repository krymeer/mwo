AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: TodoApi
      StageName: v1
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "0.2"
          title: "mwo-todo"
        schemes:
        - "https"
        paths:
          /todo:
            post:
              description: Create a new note
              security:
                - mwoUserPool: []
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - in: body
                name: note
                description: A note to be saved
                schema:
                  $ref: '#/definitions/NoteNew'
              responses:
                "200":
                  description: created
                  schema:
                    $ref: '#/definitions/Note'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt TodoPostHandler.Arn
                      - /invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              description: All notes of the user performing the request
              security:
                - mwoUserPool: []
              produces:
              - application/json
              responses:
                "200":
                  description: ok
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/Note'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt TodoGetHandler.Arn
                      - /invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'OPTIONS,GET,POST'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
          /todo/{id}:
            parameters:
            - name: id
              in: path
              description: description
              type: integer
              required: true
            get:
              security:
              - mwoUserPool: []
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Note'
                '404':
                  description: Not found
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt TodoGetHandler.Arn
                      - /invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              security:
              - mwoUserPool: []
              parameters:
              - name: note
                in: body
                schema:
                  $ref: '#/definitions/Note'
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Note'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt TodoPutHandler.Arn
                      - /invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              security:
              - mwoUserPool: []
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Note'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt TodoDeleteHandler.Arn
                      - /invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              summary: CORS support
              description:
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\"statusCode\" : 200}"
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'OPTIONS,GET,PUT,DELETE'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
        definitions:
          "NoteNew":
            description: Data required for creating a new note
            type: object
            properties:
              Content:
                type: string
            required: ['Content']
          "Note":
            description: The entire note object
            type: object
            properties:
              ID:
                type: string
              UserID:
                type: string
              Content:
                type: string
              CreatedAt:
                type: integer
            additionalProperties: false
            required: ['ID', 'Content']
        securityDefinitions:
          mwoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs: [
                "arn:aws:cognito-idp:eu-central-1:874845083551:userpool/eu-central-1_1dEhQvStV"
              ]
  TodoPostHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: post_todo.handler
      Runtime: nodejs6.10
      CodeUri: ./handlers
      Events:
        "NewTodo":
          Type: Api
          Properties:
            Path: /todo
            Method: post
            RestApiId: !Ref TodoApi
      Tags:
        Application: mwo-todo
      Role: !GetAtt TodoHandlerRole.Arn
  TodoGetHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_todo.handler
      Runtime: nodejs6.10
      CodeUri: ./handlers
      Events:
        TodoGetById:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: get
            RestApiId: !Ref TodoApi
        TodoGetAll:
          Type: Api
          Properties:
            Path: /todo
            Method: get
            RestApiId: !Ref TodoApi
      Tags:
        Application: mwo-todo
      Role: !GetAtt TodoHandlerRole.Arn
  TodoPutHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: put_todo.handler
      Runtime: nodejs6.10
      CodeUri: ./handlers
      Events:
          TodoUpdateById:
            Type: Api
            Properties:
              Path: /todo/{id}
              Method: put
              RestApiId: !Ref TodoApi
      Tags:
        Application: mwo-todo
      Role: !GetAtt TodoHandlerRole.Arn
  TodoDeleteHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_todo.handler
      Runtime: nodejs6.10
      CodeUri: ./handlers
      Events:
          TodoUpdateById:
            Type: Api
            Properties:
              Path: /todo/{id}
              Method: delete
              RestApiId: !Ref TodoApi
      Tags:
        Application: mwo-todo
      Role: !GetAtt TodoHandlerRole.Arn
  Todos:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
        - AttributeName: "UserID"
          AttributeType: "S"
        - AttributeName: "CreatedAt"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "ID"
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "UserIndex"
          KeySchema:
            - AttributeName: "UserID"
              KeyType: HASH
            - AttributeName: "CreatedAt"
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Application
          Value: mwo-todo
  PostTodoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [TodoPostHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: TodoApi
            - "/*/*/*"
  GetTodoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [TodoGetHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: TodoApi
            - "/*/*/*"
  PutTodoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [TodoPutHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: TodoApi
            - "/*/*/*"
  DeleteTodoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [TodoDeleteHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: TodoApi
            - "/*/*/*"
  TodoHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  TodoHandlersCommonPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TodoHandlersCommonAccessPolicy
      Roles:
        - Ref: TodoHandlerRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: cloudformation:DescribeStackResource
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:cloudformation:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":stack/mwo-todo/*"
          - Effect: Allow
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
            Resource:
              - !GetAtt Todos.Arn
              - !Join ["", [!GetAtt Todos.Arn, "/index/*"]]